  version: 2.1
  executors:
    runai-executor:
      docker:
        - image: cimg/go:1.18.2
  
  commands:
    remote_docker:
      steps:
        - setup_remote_docker:
            docker_layer_caching: true
            version: 20.10.14
    install_project_dependencies:
      steps:
        - checkout
        - run:
            name: "Install project dependencies"
            command: |
              go mod download
              go mod verify

    pre_docker_commands:
      steps:
        - run:
            name: "Docker gcr login"
            command: cat gcr_auth.json | docker login -u _json_key --password-stdin https://gcr.io
        - run:
            name: "Docker Red Hat login"
            command: echo "$REDHAT_DOCKER_PASS" | docker login -u $REDHAT_DOCKER_USER --password-stdin https://registry.redhat.io
        - setup_remote_docker:
            docker_layer_caching: true


    operator_update_version_in_runai_helm_chart:
      steps:
        - run:
            name: Update version in helm chart
            command: |
              TAG=${CIRCLE_TAG/v/''}
              echo "Updating fake-gpu-operator new version number $TAG in runai helm chart directory..."
              cd deploy/fake-gpu-operator
              sed -i "0,/^\([[:space:]]*tag: *\).*/s//\1$TAG/" values.yaml

  jobs:
    lint:
      executor: runai-executor
      steps:
         - setup_remote_docker:
              docker_layer_caching: true
         - install_project_dependencies
         - run:
             command: |
              curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.46.2
              golangci-lint run -v --timeout 5m
    test:
      executor: runai-executor
      steps:
        - setup_remote_docker:
              docker_layer_caching: true
        - install_project_dependencies
        - run:
            name: "Create a temp directory for artifacts"
            command: |
              mkdir -p /tmp/artifacts
              mkdir -p /tmp/artifacts/test-results
              mkdir -p /tmp/artifacts/test-results/unit-tests
              mkdir -p /tmp/artifacts/test-results/service-tests

        # - run:
        #     name: "Run Unit tests"
        #     command: |
        #       echo "Running Unit tests"
        #       gotestsum --junitfile /tmp/artifacts/test-results/unit-tests/unit-tests.xml -f standard-verbose -- -count 1 -coverprofile=coverageresult.out ./pkg/...
        #       go tool cover -html=coverageresult.out -o coverage.html
        #       mv coverage.html /tmp/artifactse
        - run:
            name: "Run Service tests"
            command: |
              make test-all
        - store_artifacts:
            name: "Store artifacts"
            path: /tmp/artifacts
        - store_test_results:
            name: "Store test results"
            path: /tmp/artifacts/test-results
    deploy_to_staging:
      executor: runai-executor
      steps:
        - checkout
        - run:
            name: "Extract gcloud private key to file"
            command: echo "$STAGING_GCLOUD_SERVICE_JSON_CONTENT" | base64 -d > ./gcr_auth.json
        - pre_docker_commands
        - run:
            name: "Build Images"
            environment:
              CIRCLE_TAG: <<pipeline.git.tag>>
            command: |
              DOCKER_REPO_BASE="gcr.io/run-ai-staging/fake-gpu-operator"
              make images DOCKER_REPO_BASE=${DOCKER_REPO_BASE} DOCKER_TAG=${CIRCLE_TAG}
        - run:
            name: "Push to Google Cloud"
            command: |
              TAG=<<pipeline.git.revision>>
              DOCKER_REPO_BASE="gcr.io/run-ai-staging/fake-gpu-operator"
              make push-all DOCKER_REPO_BASE=${DOCKER_REPO_BASE} DOCKER_TAG=${TAG}
    deploy_to_production:
      executor: runai-executor
      steps:
        - checkout
        - run:
            name: "Extract gcloud private key to file"
            command: echo "$STAGING_GCLOUD_SERVICE_JSON_CONTENT" | base64 -d > ./gcr_auth.json

        - pre_docker_commands
        - run:
            name: "Push to Google Cloud"
            environment:
              CIRCLE_TAG: <<pipeline.git.tag>>
            command: |
              TAG=${CIRCLE_TAG/v/''}
              DOCKER_REPO_BASE="gcr.io/run-ai-staging/fake-gpu-operator"
              make images DOCKER_REPO_BASE=${DOCKER_REPO_BASE} DOCKER_TAG=${TAG}
              make push-all

    operator_deploy_staging:
      working_directory: ~/go/src/github.com/run-ai/fake-gpu-operator
      docker:
        - image: google/cloud-sdk:276.0.0 # Later versions do not have pip
      steps:
        - checkout
        - remote_docker
        - run:
            name: "Extract gcloud private key to file"
            command: echo "$STAGING_GCLOUD_SERVICE_JSON_CONTENT" | base64 -d > ./gcr_auth.json
        - pre_docker_commands
        - run:
            name: Install Golang
            command: curl -L https://git.io/vQhTU | bash -s -- --version 1.17
        - run:
            name: Test and deploy operator
            environment:
              CIRCLE_SHA1: <<pipeline.git.revision>>
              CIRCLE_TAG: <<pipeline.git.tag>>
              RUNAI_REPO_URL: https://fake-gpu-operator.storage.googleapis.com/
              UPLOAD_TARGET: staging
              GCLOUD_PROJECT: run-ai-staging
            command: |
              # get golang in PATH
              source ~/.bashrc
              script/uploadOperator.sh
        - run:
            name: Package and publish chart to staging
            environment:
              CIRCLE_SHA1: <<pipeline.git.revision>>
              CIRCLE_TAG: <<pipeline.git.tag>>
              PIPELINE_NUMBER: <<pipeline.number>>
              REPO_URL: https://fake-gpu-operator.storage.googleapis.com/
              BUCKET: gs://fake-gpu-operator
              UPLOAD_TARGET: staging
              GCLOUD_PROJECT: run-ai-staging
            command: |
              cd runai-chart
              script/uploadChart.sh

  workflows:
    version: 2
    production:
      jobs:
        - lint:
            filters:
              branches:
                ignore: /.*/
              tags:
                only: /^v.*/
        - test:
            filters:
              branches:
                ignore: /.*/
              tags:
                only: /^v.*/
        - deploy_to_production:
            requires:
              - lint
              - test
        - operator_deploy_staging:
            requires:
              - lint
              - test
            filters:
              branches:
                ignore: /.*/
              tags:
                only: /^v.*/

    build_test_deploy:
      jobs:
        - lint:
            filters:
              tags:
                ignore: /^v.*/
        - test:
            filters:
              tags:
                ignore: /^v.*/

        - deploy_to_staging:
            requires:
              - lint
              - test

            filters:
              tags:
                ignore: /^v.*/
              branches:
                only:
                  - RUN-3997/CI-CD
                  # - main